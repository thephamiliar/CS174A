<!DOCTYPE html>
<html>

<script id="vertex-shader" type="x-shader/x-vertex">
precision mediump float;
varying vec4 fColor;

attribute vec4 vPosition;
attribute vec4 vNormal;
varying vec3 N, L, E;

uniform vec4 ambientProduct, diffuseProduct, specularProduct;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 worldSpaceMatrix;
uniform vec4 lightPosition;
uniform float shininess;

uniform int isPhong;

void
main()
{
    // calculations for lighting
    vec3 pos = -(worldSpaceMatrix * modelViewMatrix * vPosition).xyz;
    vec3 light = (worldSpaceMatrix * lightPosition).xyz;
    L = normalize( light - pos );

    E = normalize( -pos );
    vec3 H = normalize( L + E );

    // Transform vertex normal into eye coordinates
    
       
    N = normalize( ( modelViewMatrix * vNormal).xyz);

    // color calculations per vertex
    if (isPhong == 0) {
        // Compute terms in the illumination equation
        vec4 ambient = ambientProduct;

        float Kd = max( dot(L, N), 0.0 );
        vec4  diffuse = Kd*diffuseProduct;

        float Ks = pow( max(dot(N, H), 0.0), shininess );
        vec4  specular = Ks * specularProduct;
        
        if( dot(L, N) < 0.0 ) {
    	specular = vec4(0.0, 0.0, 0.0, 1.0);
        } 
        
        fColor = ambient + diffuse +specular;

        fColor.a = 1.0;
    }
    gl_Position = projectionMatrix * worldSpaceMatrix * modelViewMatrix * vPosition;
}
</script>

<script id="fragment-shader" type="x-shader/x-fragment">
precision mediump float;
varying vec4 fColor;
 
uniform vec4 ambientProduct, diffuseProduct, specularProduct;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 worldSpaceMatrix;
uniform float shininess;

uniform int isPhong;
 
varying vec3 N, L, E;

void
main()
{
    // Phong Shading
    if (isPhong == 1) {
        vec4 fColor;
        
        vec3 H = normalize( L + E );
        vec4 ambient = ambientProduct;

        float Kd = max( dot(L, N), 0.0 );
        vec4  diffuse = Kd*diffuseProduct;

        float Ks = pow( max(dot(N, H), 0.0), shininess );
        vec4  specular = Ks * specularProduct;
        
        if( dot(L, N) < 0.0 ) specular = vec4(0.0, 0.0, 0.0, 1.0);

        fColor = ambient + diffuse +specular;
        fColor.a = 1.0;
        gl_FragColor = fColor;
    } else { 
        gl_FragColor = fColor;
    }
}
</script>

<script type="text/javascript" src="../Common/webgl-utils.js"></script>
<script type="text/javascript" src="../Common/InitShaders.js"></script>

<script type="text/javascript" src="../Common/MV.js"></script>
<script type="text/javascript" src="shadedSphere.js"></script>

<body>
<canvas id="gl-canvas" width="512" height="512">
Oops ... your browser doesn't support the HTML5 canvas element
</canvas>
</body>
</html>
